<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <context:component-scan base-package="com.mafwo.controller"/>
    <context:component-scan base-package="com.mafwo.services"/>

    <!-- enable autowire -->
    <context:annotation-config />
    <!-- enable transaction demarcation with annotations -->

    <!-- 多视图配置 -->
    <!--

        多视图配置方案一

        执行过程：

        当控制器返回一个名为“welcome”的视图时，ResourceBundleViewResolver将在“spring-views.properties”文件中查找以“welcome”起始的键，
        并返回相对应的视图URL“/WEB-INF/pages/welcome.jsp”给DispatcherServlet。


    -->
    <bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
        <property name="basename" value="properties/views">
        </property>
        <!-- <property name="order" value="0"></property> -->
    </bean>
    <!--

        多视图配置方案二

        通过自定义视图解析器    通过controller返回视图后缀控制视图真是对应的解析器

    -->
    <!--<bean id="viewResolver" class="com.mafwo.MultiViewResover">
        <property name="resolvers">
            <map>
                <entry key="jsp">
                    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                        <property name="prefix" value="/WEB-INF/jsp/"/>
                        <property name="suffix" value=".jsp"/>
                    </bean>
                </entry>
                <entry key="vm">
                    <bean id="velocityViewResolver"
                          class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
                        <property name="cache" value="false" />
                        <property name="suffix" value=".vm" />
                        <property name="exposeSpringMacroHelpers" value="true" />
                        <property name="exposeRequestAttributes" value="true" />
                        <property name="dateToolAttribute" value="date" />
                        <property name="numberToolAttribute" value="number" />
                        <property name="contentType" value="text/html;charset=UTF-8" />
                    </bean>
                </entry>
            </map>
        </property>
    </bean>-->

    <!--
            多视图配置方案三

            通过配置多个视图解析器，会生成解析器链 为解析器添加order属性   定义解析器在链中顺序，InternalResourceViewResolver一般在最低端从而达到多解析器需求，
            如果 InternalResourceViewResolver 没有在最底端 其他解析器不会起作用

            参考：http://xiaoyaocao.iteye.com/blog/1839125  http://xiaoyaocao.iteye.com/blog/1839547
            http://www.cnblogs.com/rollenholt/archive/2012/12/27/2836035.html

      -->

   <!--
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
            <property name="prefix" value="/WEB-INF/jsp/"/>
            <property name="suffix" value=".jsp"/>
        </bean>
        <bean id="velocityViewResolver"
              class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
            <property name="order" value="1"></property>
            <property name="cache" value="false" />
            <property name="suffix" value=".vm" />
            <property name="exposeSpringMacroHelpers" value="true" />
            <property name="exposeRequestAttributes" value="true" />
            <property name="dateToolAttribute" value="date" />
            <property name="numberToolAttribute" value="number" />
            <property name="contentType" value="text/html;charset=UTF-8" />
         </bean>
    -->



    <!-- veloctity	 -->
    <bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/WEB-INF/pages/"></property>
        <property name="velocityProperties">
            <props>
                <prop key="input.encoding">UTF-8</prop>
                <prop key="output.encoding">UTF-8</prop>
                <prop key="contentType">text/html;charset=UTF-8</prop>
            </props>
        </property>
    </bean>



</beans>